{"version":3,"file":"redisUtils.js","sourceRoot":"/","sources":["utils/redisUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,4DAAqC;AACrC,kEAGoC;AAEpC,eAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC,CAAC;AAEpE,eAAM;KACH,OAAO,EAAE;KACT,IAAI,CAAC,GAAG,EAAE;IACT,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AACpC,CAAC,CAAC;KACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACb,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC;AAEL,MAAM,QAAQ,GAAG,CAAO,GAAW,EAAE,EAAE;IACrC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,IAAA,gBAAS,EAAC,eAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,eAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QAE3D,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAA,yCAAqB,EAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAA,CAAC;AAcO,4BAAQ;AAZjB,MAAM,QAAQ,GAAG,KAAoD,EAAE,4CAA/C,EAAE,GAAG,EAAE,KAAK,EAA+B;IACjE,IAAI,CAAC;QACH,MAAM,WAAW,GAAG,MAAM,IAAA,yCAAqB,EAAC,KAAK,CAAC,CAAC;QACvD,MAAM,eAAM,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;IAC7C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;AACH,CAAC,CAAA,CAAC;AAKiB,4BAAQ;AAH3B,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;AAGJ,wCAAc;AAF3C,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;AAES,8CAAiB","sourcesContent":["import { promisify } from \"util\";\r\nimport client from \"../config/redis\";\r\nimport {\r\n  convertBinaryToObject,\r\n  convertObjectToBinary\r\n} from \"../utils/binaryTransformer\";\r\n\r\nclient.on(\"error\", (err) => console.log(\"Redis Client Error\", err));\r\n\r\nclient\r\n  .connect()\r\n  .then(() => {\r\n    console.log(\"Connected to Redis\");\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Error connecting to Redis:\", err);\r\n  });\r\n\r\nconst getAsync = async (key: string) => {\r\n  try {\r\n    const data = await promisify(client.get).bind(client)(key);\r\n\r\n    if (!data) {\r\n      return null;\r\n    }\r\n\r\n    return convertBinaryToObject(data);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst setAsync = async ({ key, value }: { key: string; value: any }) => {\r\n  try {\r\n    const binaryValue = await convertObjectToBinary(value);\r\n    await client.setEx(key, 3600, binaryValue);\r\n  } catch (error) {\r\n    console.error(\"Error setting data in Redis:\", error);\r\n  }\r\n};\r\n\r\nconst timeoutStorage = new Map();\r\nconst usersViewingEvent = new Map();\r\n\r\nexport { getAsync, setAsync, timeoutStorage, usersViewingEvent };\r\n"]}