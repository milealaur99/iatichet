{"version":3,"file":"jwt.js","sourceRoot":"/","sources":["utils/jwt.ts"],"names":[],"mappings":";;;;;;AAAA,gEAA+B;AAExB,MAAM,kBAAkB,GAAG,CAChC,GAAiE,EACjE,EAAE;IACF,IACE,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,CAAC,eAAe,CAAC;SAC7B,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,CAAC,eAAe,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAA,EAClD,CAAC;QACD,OAAO,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAVW,QAAA,kBAAkB,sBAU7B;AAEF,MAAM,SAAS,GAAG,OAAO,CAAC;AAC1B,MAAM,SAAS,GAAG,IAAI,CAAC;AAEhB,MAAM,IAAI,GAAG,CAAC,OAKpB,EAAE,EAAE;IACH,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAoB,CAAC;IAEhD,OAAO,sBAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;AAC7D,CAAC,CAAC;AATW,QAAA,IAAI,QASf;AAEK,MAAM,MAAM,GAAG,CAAC,KAAa,EAAE,EAAE;IACtC,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAoB,CAAC;QAChD,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAChE,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;AACH,CAAC,CAAC;AAPW,QAAA,MAAM,UAOjB;AAEK,MAAM,MAAM,GAAG,CAAC,KAAa,EAAE,EAAE;IACtC,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAS1C,CAAC;AACJ,CAAC,CAAC;AAXW,QAAA,MAAM,UAWjB","sourcesContent":["import jwt from \"jsonwebtoken\";\r\n\r\nexport const getTokenFromHeader = (\r\n  req: Request & { headers: { [key: string]: string } | undefined }\r\n) => {\r\n  if (\r\n    req?.headers[\"authorization\"] &&\r\n    req?.headers[\"authorization\"].startsWith(\"Bearer\")\r\n  ) {\r\n    return req?.headers[\"authorization\"].split(\" \")[1];\r\n  }\r\n  return null;\r\n};\r\n\r\nconst algorithm = \"HS256\";\r\nconst expiresIn = \"2h\";\r\n\r\nexport const sign = (payload: {\r\n  username: string;\r\n  id: string;\r\n  password: string;\r\n  role: string;\r\n}) => {\r\n  const secret = process.env.JWT_SECRET as string;\r\n\r\n  return jwt.sign(payload, secret, { algorithm, expiresIn });\r\n};\r\n\r\nexport const verify = (token: string) => {\r\n  try {\r\n    const secret = process.env.JWT_SECRET as string;\r\n    return jwt.verify(token, secret, { algorithms: [algorithm] });\r\n  } catch (err) {\r\n    throw new Error(\"Invalid token\");\r\n  }\r\n};\r\n\r\nexport const decode = (token: string) => {\r\n  return jwt.decode(token, { complete: true }) as {\r\n    header: { alg: string };\r\n    payload: {\r\n      username: string;\r\n      id: string;\r\n      password: string;\r\n      role: string;\r\n    };\r\n    signature: string;\r\n  };\r\n};\r\n"]}