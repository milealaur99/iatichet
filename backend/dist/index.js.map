{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,oDAA4B;AAC5B,sDAAqD;AACrD,wDAAgC;AAChC,8DAA2D;AAC3D,yEAAiD;AACjD,0DAAiE;AACjE,sEAA6E;AAC7E,yFAA0D;AAC1D,uEAAiE;AACjE,qEAAkE;AAClE,iEAAqD;AACrD,kEAA4C;AAC5C,sEAA+C;AAC/C,uEAA+C;AAC/C,8DAAqE;AAErE,gDAAwB;AAGxB,oDAAuD;AAEvD,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,GAAG,GAAoB,IAAA,iBAAO,GAAE,CAAC;AAwD9B,kBAAG;AAvDZ,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAEtC,IAAA,6BAAa,EAAC,EAAE,GAAG,EAAE,CAAC,CAAC;AAEvB,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,oBAAU,CAAC,CAAC;AACjC,GAAG,CAAC,GAAG,CAAC,mBAAmB,EAAE,0BAAiB,CAAC,CAAC;AAChD,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,4BAAW,CAAC,CAAC;AACnC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,oBAAW,CAAC,CAAC;AACpC,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,sBAAa,CAAC,CAAC;AACvC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAS,CAAC,CAAC;AAE3B,GAAG,CAAC,GAAG,CAAC,8BAAY,CAAC,CAAC;AACtB,MAAM,YAAY,GAAG,IAAI,oCAAY,CAAC;IACpC,QAAQ,EAAR,gBAAQ;IACR,SAAS,EAAT,kBAAS;IACT,OAAO,EAAE,KAaN,EAAE,4CAbW,EACd,GAAG,EACH,GAAG,EAWJ;QACC,MAAM,IAAA,+BAAc,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACzC,OAAO,EAAE,IAAI,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,EAAE,CAAC;IAC7B,CAAC,CAAA;CACF,CAAC,CAAC;AAuBmB,oCAAY;AArBlC,MAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AAqBxB,wBAAM;AAnBpB,IAAA,yBAAc,EAAC,MAAM,CAAC,CAAC;AAEvB,kBAAQ;KACL,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,SAAmB,CAAC;KACxC,IAAI,CAAC,GAAS,EAAE;IACf,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAS,EAAE;QAC7B,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,EAAE,CAAC,CAAC;QAC9C,MAAM,YAAY,CAAC,KAAK,EAAE,CAAC;QAC3B,YAAY,CAAC,eAAe,CAAC;YAC3B,aAAa;YACb,GAAG;YACH,IAAI,EAAE,cAAc;SACrB,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAA,CAAC;KACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACb,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC","sourcesContent":["import dotenv from \"dotenv\";\r\nimport express, { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { setupSecurity } from \"./src/config/setupSecurity\";\r\nimport authRoutes from \"./src/routes/authRoutes\";\r\nimport { router as eventRoutes } from \"./src/routes/eventRoutes\";\r\nimport { router as reservationRoutes } from \"./src/routes/reservationRoutes\";\r\nimport adminRoutes from \"./src/routes/adminActionsRoutes\";\r\nimport { errorHandler } from \"./src/middlewares/errorMiddleware\";\r\nimport { authMiddleware } from \"./src/middlewares/authMiddleware\";\r\nimport { ApolloServer } from \"apollo-server-express\";\r\nimport typeDefs from \"./src/graphql/schema\";\r\nimport resolvers from \"./src/graphql/resolver\";\r\nimport pdfRoutes from \"./src/routes/pdfRoutes\";\r\nimport { router as paymentRoutes } from \"./src/routes/paymentRoutes\";\r\nimport { Server as SocketServer } from \"socket.io\";\r\nimport http from \"http\";\r\nimport { usersViewingEvent } from \"./src/utils/redisUtils\";\r\nimport { setup } from \"swagger-ui-express\";\r\nimport { setupIoSockets } from \"./src/config/ioSocket\";\r\n\r\ndotenv.config();\r\n\r\nconst app: express.Express = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\nsetupSecurity({ app });\r\n\r\napp.use(\"/api/auth\", authRoutes);\r\napp.use(\"/api/reservations\", reservationRoutes);\r\napp.use(\"/api/admin\", adminRoutes);\r\napp.use(\"/api/events\", eventRoutes);\r\napp.use(\"/api/payment\", paymentRoutes);\r\napp.use(\"/api\", pdfRoutes);\r\n\r\napp.use(errorHandler);\r\nconst apolloServer = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  context: async ({\r\n    req,\r\n    res\r\n  }: {\r\n    req: Request & {\r\n      user?: {\r\n        username: string;\r\n        id: string;\r\n        password: string;\r\n        role: string;\r\n      };\r\n    };\r\n    res: Response;\r\n  }) => {\r\n    await authMiddleware(req, res, () => {});\r\n    return { user: req?.user };\r\n  }\r\n});\r\n\r\nconst server = http.createServer(app);\r\n\r\nsetupIoSockets(server);\r\n\r\nmongoose\r\n  .connect(process.env.MONGO_URI as string)\r\n  .then(async () => {\r\n    server.listen(PORT, async () => {\r\n      console.log(`Server running on port ${PORT}`);\r\n      await apolloServer.start();\r\n      apolloServer.applyMiddleware({\r\n        // @ts-ignore\r\n        app,\r\n        path: \"/api/graphql\"\r\n      });\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database connection error:\", err);\r\n  });\r\n\r\nexport { app, server, apolloServer };\r\n"]}