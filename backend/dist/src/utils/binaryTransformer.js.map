{"version":3,"file":"binaryTransformer.js","sourceRoot":"/","sources":["src/utils/binaryTransformer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,gDAAwB;AAExB,MAAM,IAAI,GAAG,IAAA,gBAAS,EAAC,cAAI,CAAC,IAAI,CAAC,CAAC;AAClC,MAAM,MAAM,GAAG,IAAA,gBAAS,EAAC,cAAI,CAAC,MAAM,CAAC,CAAC;AAE/B,MAAM,qBAAqB,GAAG,CAAO,GAAQ,EAAmB,EAAE;IACvE,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QACjE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC7C,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAA,CAAC;AATW,QAAA,qBAAqB,yBAShC;AAEK,MAAM,qBAAqB,GAAG,CAAO,MAAc,EAAgB,EAAE;IAC1E,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE7C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAA,CAAC;AAdW,QAAA,qBAAqB,yBAchC","sourcesContent":["import { promisify } from \"util\";\r\nimport zlib from \"zlib\";\r\n\r\nconst gzip = promisify(zlib.gzip);\r\nconst gunzip = promisify(zlib.gunzip);\r\n\r\nexport const convertObjectToBinary = async (obj: any): Promise<string> => {\r\n  try {\r\n    const json = typeof obj === 'object' ? JSON.stringify(obj) : obj;\r\n    const compressed = await gzip(json);\r\n    const base64 = compressed.toString('base64');\r\n    return base64;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const convertBinaryToObject = async (binary: string): Promise<any> => {\r\n  try {\r\n    const buffer = Buffer.from(binary, 'base64');\r\n\r\n    if (!Buffer.isBuffer(buffer)) {\r\n      throw new Error('Decoded data is not a valid buffer');\r\n    }\r\n\r\n    const decompressed = await gunzip(buffer);\r\n    const json = decompressed.toString();\r\n    return JSON.parse(json);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};"]}