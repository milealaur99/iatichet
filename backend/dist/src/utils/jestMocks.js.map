{"version":3,"file":"jestMocks.js","sourceRoot":"/","sources":["src/utils/jestMocks.ts"],"names":[],"mappings":"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","sourcesContent":["import { MongoMemoryServer } from \"mongodb-memory-server\";\r\nimport mongoose from \"mongoose\";\r\nimport request from \"supertest\";\r\nimport { Express } from \"express\";\r\nimport User, { User as UserType } from \"../models/User\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nlet mongoServer: MongoMemoryServer;\r\n\r\nexport const createMongoServer = async () => {\r\n  if (!mongoServer) {\r\n    mongoServer = await MongoMemoryServer.create();\r\n  }\r\n\r\n  const uri = mongoServer.getUri();\r\n\r\n  if (mongoose.connection.readyState !== 0) {\r\n    await mongoose.disconnect();\r\n  }\r\n\r\n  await mongoose.connect(uri, {});\r\n\r\n  mongoose.connection.on(\"connected\", () => {\r\n    console.log(\"Database connected\");\r\n  });\r\n\r\n  mongoose.connection.on(\"error\", (err) => {\r\n    console.error(\"Connection error:\", err);\r\n  });\r\n\r\n  const disconnectServer = async () => {\r\n    await mongoose.connection.dropDatabase();\r\n    await mongoose.connection.close();\r\n    await mongoServer.stop();\r\n  };\r\n\r\n  return { mongoServer, disconnectServer };\r\n};\r\n\r\nexport const getCsrfTokenAndCookie = async (app: Express) => {\r\n  const csrfResponse = await request(app).get(\"/api/csrf-token\");\r\n  const csrfToken = csrfResponse.body.csrfToken;\r\n  const cookie = csrfResponse.headers[\"set-cookie\"];\r\n  return { csrfToken, cookie };\r\n};\r\n\r\nexport const createUserAndLogin = async ({\r\n  username,\r\n  email,\r\n  password,\r\n  role,\r\n  app\r\n}: {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  role: string;\r\n  app: Express;\r\n}): Promise<{\r\n  user: UserType;\r\n  token: string;\r\n  csrfToken: string;\r\n  cookie: string;\r\n}> => {\r\n  await User.deleteMany({ email });\r\n\r\n  const user = new User({\r\n    username,\r\n    email,\r\n    password: await bcrypt.hash(password, 12),\r\n    role\r\n  });\r\n  await user.save();\r\n\r\n  const { csrfToken, cookie } = await getCsrfTokenAndCookie(app);\r\n\r\n  const loginResponse = await request(app)\r\n    .post(\"/api/auth/login\")\r\n    .set(\"XSRF-TOKEN\", csrfToken)\r\n    .set(\"Cookie\", cookie)\r\n    .send({ username, password });\r\n\r\n  const token = loginResponse.body.token;\r\n  return { token, csrfToken, cookie, user };\r\n};\r\n"]}