{"version":3,"file":"uploadImageMiddleware.js","sourceRoot":"/","sources":["src/middlewares/uploadImageMiddleware.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,gDAAwB;AACxB,4CAAoB;AAEpB,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;AAE1D,IAAI,CAAC;IACH,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;QAChC,YAAE,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACjD,CAAC;AACH,CAAC;AAAC,OAAO,GAAG,EAAE,CAAC;IACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrB,CAAC;AAED,MAAM,OAAO,GAAG,gBAAM,CAAC,WAAW,CAAC;IACjC,WAAW,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;QAC7B,EAAE,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACxB,CAAC;IACD,QAAQ,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;QAC1B,EAAE,CACA,IAAI,EACJ,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CACpE,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,MAAM,GAAG,IAAA,gBAAM,EAAC;IAC3B,OAAO,EAAE,OAAO;IAChB,MAAM,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE;IAC7B,UAAU,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;QAC5B,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1B,CAAC;CACF,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEpB,SAAS,aAAa,CACpB,IAAyB,EACzB,EAA6B;IAE7B,MAAM,SAAS,GAAG,cAAc,CAAC;IACjC,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;IAC9E,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAE/C,IAAI,QAAQ,IAAI,OAAO,EAAE,CAAC;QACxB,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxB,CAAC;SAAM,CAAC;QACN,EAAE,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;IAChC,CAAC;AACH,CAAC","sourcesContent":["import multer from \"multer\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nconst uploadsPath = path.join(__dirname, \"../../uploads\");\r\n\r\ntry {\r\n  if (!fs.existsSync(uploadsPath)) {\r\n    fs.mkdirSync(uploadsPath, { recursive: true });\r\n  }\r\n} catch (err) {\r\n  console.error(err);\r\n}\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, uploadsPath);\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(\r\n      null,\r\n      `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`\r\n    );\r\n  }\r\n});\r\n\r\nexport const upload = multer({\r\n  storage: storage,\r\n  limits: { fileSize: 1000000 },\r\n  fileFilter: (req, file, cb) => {\r\n    checkFileType(file, cb);\r\n  }\r\n}).single(\"poster\");\r\n\r\nfunction checkFileType(\r\n  file: Express.Multer.File,\r\n  cb: multer.FileFilterCallback\r\n) {\r\n  const filetypes = /jpeg|jpg|png/;\r\n  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());\r\n  const mimetype = filetypes.test(file.mimetype);\r\n\r\n  if (mimetype && extname) {\r\n    return cb(null, true);\r\n  } else {\r\n    cb(new Error(\"Images Only!\"));\r\n  }\r\n}\r\n"]}