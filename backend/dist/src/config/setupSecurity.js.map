{"version":3,"file":"setupSecurity.js","sourceRoot":"/","sources":["src/config/setupSecurity.ts"],"names":[],"mappings":"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","sourcesContent":["import express from \"express\";\r\nimport cors from \"cors\";\r\nimport helmet from \"helmet\";\r\nimport rateLimit from \"express-rate-limit\";\r\nimport csrf from \"csurf\";\r\nimport session from \"express-session\";\r\nimport path from \"path\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport { Request, Response } from \"express\";\r\nimport responseTime from \"response-time\";\r\nimport * as Sentry from \"@sentry/node\";\r\nimport { swagger } from \"../../src/config/swagger\";\r\nimport { initSetry } from \"../../src/config/sentry\";\r\nimport Hall from \"../models/Hall\";\r\n\r\nconst RATE_LIMIT_TIME = 15 * 60 * 1000;\r\nconst MAX_REQUESTS_PER_IP = 100000;\r\nconst LIMITER_MESSAGE =\r\n  \"Too many requests from this IP, please try again later.\";\r\nconst csrfProtection = csrf({ cookie: true });\r\n\r\nconst setupCSRF = ({ app }: { app: express.Express }) => {\r\n  app.use(csrfProtection);\r\n\r\n  app.use((req, res, next) => {\r\n    res.locals.csrfToken = req.csrfToken();\r\n    next();\r\n  });\r\n\r\n  app.get(\"/api/csrf-token\", (req, res) => {\r\n    res.cookie(\"XSRF-TOKEN\", req.csrfToken());\r\n    res.json({ csrfToken: req.csrfToken() });\r\n  });\r\n};\r\n\r\nexport const setupSecurity = ({ app }: { app: express.Express }) => {\r\n  app.use(helmet());\r\n  app.use(\r\n    cors({\r\n      origin: \"http://localhost:3000\",\r\n      credentials: true\r\n    })\r\n  );\r\n  app.use(express.json());\r\n  app.use(express.urlencoded({ extended: true }));\r\n  app.use(\r\n    \"/uploads\",\r\n    express.static(path.join(__dirname, \"..\", \"..\", \"uploads\"))\r\n  );\r\n  app.use(cookieParser());\r\n\r\n  app.use(\r\n    responseTime((req: Request, res: Response, time: number) => {\r\n      console.log(`${req.method} ${req.url} took ${time}ms`);\r\n    })\r\n  );\r\n\r\n  const limiter = rateLimit({\r\n    windowMs: RATE_LIMIT_TIME,\r\n    max: MAX_REQUESTS_PER_IP,\r\n    message: LIMITER_MESSAGE\r\n  });\r\n  app.use(limiter);\r\n\r\n  Sentry.setupExpressErrorHandler(app);\r\n\r\n  app.use(\r\n    session({\r\n      secret: process.env.COOKIE_KEY as string,\r\n      resave: false,\r\n      saveUninitialized: false\r\n    })\r\n  );\r\n\r\n  Hall.initializeHalls();\r\n  swagger(app);\r\n  initSetry();\r\n\r\n  setupCSRF({ app });\r\n};\r\n"]}