{"version":3,"file":"authController.js","sourceRoot":"/","sources":["src/controllers/authController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Response, Request } from \"express\";\r\nimport { sign } from \"../utils/jwt\";\r\nimport UserModel, { User } from \"../models/User\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { omit } from \"lodash\";\r\n\r\nexport const login = async (req: Request & { user?: User }, res: Response) => {\r\n  const { username, password } = req.body;\r\n\r\n  if (!username || !password) {\r\n    return res.status(400).json({ message: \"Missing username or password\" });\r\n  }\r\n\r\n  const userModel = await UserModel.findOne({ username });\r\n\r\n  if (!userModel) {\r\n    return res.status(401).json({ message: \"Invalid credentials\" });\r\n  }\r\n\r\n  const passwordMatch = await bcrypt.compare(password, userModel.password);\r\n  if (!passwordMatch) {\r\n    return res.status(401).json({ message: \"Invalid credentials\" });\r\n  }\r\n  const token = sign({\r\n    username,\r\n    id: userModel._id?.toString() ?? \"\",\r\n    password: userModel.password,\r\n    role: userModel.role\r\n  });\r\n  res.cookie(\"jwt\", token);\r\n\r\n  return res.json({\r\n    message: \"Logged in successfully\",\r\n    token,\r\n    userId: userModel._id\r\n  });\r\n};\r\n\r\nexport const signup = async (req: Request & { user?: User }, res: Response) => {\r\n  const { username, password, confirmPassword, email } = req.body;\r\n  let userModel = await UserModel.findOne({ username });\r\n\r\n  if (userModel) {\r\n    return res.status(409).json({ message: \"Username already exists\" });\r\n  }\r\n  userModel = await UserModel.findOne({ email });\r\n\r\n  if (userModel?.email === email) {\r\n    return res.status(409).json({ message: \"Email already exists\" });\r\n  }\r\n\r\n  if (password === confirmPassword) {\r\n    const hashedPw = await bcrypt.hash(password, 12);\r\n    const newUser = new UserModel({\r\n      username,\r\n      password: hashedPw,\r\n      email\r\n    });\r\n    await newUser.save();\r\n\r\n    const token = sign({\r\n      username,\r\n      id: newUser?.id,\r\n      password: await bcrypt.hash(password, 12),\r\n      role: \"user\"\r\n    });\r\n\r\n    res.cookie(\"jwt\", token, { httpOnly: true });\r\n    return res.json({ message: \"Signed in successfully\", token });\r\n  } else {\r\n    return res.status(401).json({ message: \"Invalid credentials\" });\r\n  }\r\n};\r\n\r\nexport const logout = (req: Request & { user?: User }, res: Response) => {\r\n  res.clearCookie(\"jwt\");\r\n  return res.json({ message: \"Logged out successfully\" });\r\n};\r\n\r\nexport const resetPassword = async (\r\n  req: Request & { user?: User },\r\n  res: Response\r\n) => {\r\n  const { password, confirmPassword } = req.body;\r\n  if (password === confirmPassword) {\r\n    await UserModel.findById(req.user?.id).updateOne({ password });\r\n    return res.json({ message: \"Password changed successfully\" });\r\n  } else {\r\n    return res.status(401).json({ message: \"Invalid credentials\" });\r\n  }\r\n};\r\n\r\nexport const deleteAccount = async (\r\n  req: Request & { user?: User },\r\n  res: Response\r\n) => {\r\n  await UserModel.findByIdAndDelete(req.user?.id);\r\n  return res.json({ message: \"Account deleted successfully\" });\r\n};\r\n\r\nexport const getUserInfo = async (\r\n  req: Request & { user?: User },\r\n  res: Response\r\n) => {\r\n  try {\r\n    const user = await UserModel.findById(req.params.id ?? req.user?.id);\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    return res.json(omit(user, \"password\"));\r\n  } catch (error) {\r\n    return res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n"]}