{"version":3,"file":"adminActionsRoutes.test.js","sourceRoot":"/","sources":["src/routes/adminActionsRoutes.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\r\nimport { app, server } from \"../../index\";\r\nimport { MongoMemoryServer } from \"mongodb-memory-server\";\r\nimport User from \"../models/User\";\r\nimport { createMongoServer, createUserAndLogin } from \"../utils/jestMocks\";\r\n\r\njest.setTimeout(100000);\r\njest.mock(\"../config/redis\", () => {\r\n  const actualRedis = jest.requireActual(\"redis-mock\");\r\n  const client = actualRedis.createClient();\r\n\r\n  client.connect = jest.fn();\r\n\r\n  return {\r\n    client\r\n  };\r\n});\r\njest.mock(\"../utils/redisUtils\", () => {\r\n  const timeoutStorage = new Map();\r\n  const usersViewingEvent = new Map();\r\n\r\n  return {\r\n    timeoutStorage,\r\n    usersViewingEvent,\r\n    getAsync: jest.fn((key) => Promise.resolve(null)),\r\n    setAsync: jest.fn((key, value) => Promise.resolve(\"OK\"))\r\n  };\r\n});\r\n\r\nlet mongoData: {\r\n  mongoServer: MongoMemoryServer;\r\n  disconnectServer: () => Promise<void>;\r\n};\r\nlet csrfToken: string;\r\nlet cookie: string;\r\n\r\nbeforeAll(async () => {\r\n  mongoData = await createMongoServer();\r\n});\r\n\r\nafterAll(async () => {\r\n  server.close();\r\n  await mongoData.disconnectServer();\r\n  jest.clearAllMocks();\r\n});\r\n\r\ndescribe(\"Admin Routes\", () => {\r\n  let adminToken: string;\r\n\r\n  beforeEach(async () => {\r\n    const admin = await createUserAndLogin({\r\n      username: \"adminUser\",\r\n      email: \"admin@example.com\",\r\n      password: \"password123\",\r\n      role: \"admin\",\r\n      app\r\n    });\r\n    adminToken = admin.token;\r\n    csrfToken = admin.csrfToken;\r\n    cookie = admin.cookie;\r\n  });\r\n\r\n  describe(\"GET /api/admin/users\", () => {\r\n    it(\"should return a list of users if admin\", async () => {\r\n      const response = await request(app)\r\n        .get(\"/api/admin/users\")\r\n        .set(\"Authorization\", `Bearer ${adminToken}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body).toBeInstanceOf(Array);\r\n    });\r\n\r\n    it(\"should return 403 if not an admin\", async () => {\r\n      const user = await createUserAndLogin({\r\n        username: \"normalUser\",\r\n        email: \"user@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n      const response = await request(app)\r\n        .get(\"/api/admin/users\")\r\n        .set(\"Authorization\", `Bearer ${user.token}`)\r\n        .set(\"XSRF-TOKEN\", user.csrfToken)\r\n        .set(\"Cookie\", user.cookie)\r\n        .expect(403);\r\n\r\n      expect(response.body.message).toBe(\"Unauthorized\");\r\n    });\r\n  });\r\n\r\n  describe(\"PUT /api/admin/users/:id\", () => {\r\n    it(\"should change the role of a user\", async () => {\r\n      const { user } = await createUserAndLogin({\r\n        username: \"userToChange\",\r\n        email: \"userchange@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .put(`/api/admin/users/${user._id}`)\r\n        .set(\"Authorization\", `Bearer ${adminToken}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({ role: \"admin\" })\r\n        .expect(200);\r\n\r\n      expect(response.body.message).toBe(\"Role changed successfully\");\r\n      const updatedUser = await User.findById(user._id);\r\n      expect(updatedUser?.role).toBe(\"admin\");\r\n    });\r\n  });\r\n\r\n  describe(\"DELETE /api/admin/users/:id\", () => {\r\n    it(\"should delete a user\", async () => {\r\n      const { user } = await createUserAndLogin({\r\n        username: \"userToDelete\",\r\n        email: \"delete@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .delete(`/api/admin/users/${user._id}`)\r\n        .set(\"Authorization\", `Bearer ${adminToken}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body.message).toBe(\"User deleted successfully\");\r\n      const deletedUser = await User.findById(user._id);\r\n      expect(deletedUser).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/admin/find-users/:username\", () => {\r\n    it(\"should find users by username\", async () => {\r\n      const { user } = await createUserAndLogin({\r\n        username: \"searchedUser\",\r\n        email: \"search@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .get(`/api/admin/find-users/${user.username}`)\r\n        .set(\"Authorization\", `Bearer ${adminToken}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body).toBeInstanceOf(Array);\r\n      expect(response.body[0].username).toBe(\"searchedUser\");\r\n    });\r\n\r\n    it(\"should return 404 if no users found\", async () => {\r\n      const response = await request(app)\r\n        .get(\"/api/admin/find-users/nonexistent\")\r\n        .set(\"Authorization\", `Bearer ${adminToken}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(404);\r\n\r\n      expect(response.body.message).toBe(\"Users not found\");\r\n    });\r\n  });\r\n});\r\n"]}