{"version":3,"file":"reservationRoutes.test.js","sourceRoot":"/","sources":["src/routes/reservationRoutes.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\r\nimport { app, server } from \"../../index\";\r\nimport { MongoMemoryServer } from \"mongodb-memory-server\";\r\nimport ReservationModel from \"../models/Reservation\";\r\nimport EventModel from \"../models/Event\";\r\nimport HallModel from \"../models/Hall\";\r\nimport UserModel from \"../models/User\";\r\nimport { createMongoServer, createUserAndLogin } from \"../utils/jestMocks\";\r\n\r\njest.setTimeout(100000);\r\n\r\njest.mock(\"../utils/redisUtils\", () => ({\r\n  getAsync: jest.fn(),\r\n  setAsync: jest.fn(),\r\n  timeoutStorage: new Map()\r\n}));\r\n\r\nlet mongoData: {\r\n  mongoServer: MongoMemoryServer;\r\n  disconnectServer: () => Promise<void>;\r\n};\r\n\r\nbeforeAll(async () => {\r\n  mongoData = await createMongoServer();\r\n});\r\n\r\nafterAll(async () => {\r\n  server.close();\r\n  await mongoData.disconnectServer();\r\n  jest.clearAllMocks();\r\n});\r\n\r\ndescribe(\"Reservation Routes\", () => {\r\n  let user: any, hall: any, event: any;\r\n\r\n  beforeEach(async () => {\r\n    await ReservationModel.deleteMany({});\r\n    await EventModel.deleteMany({});\r\n    await HallModel.deleteMany({});\r\n    await UserModel.deleteMany({});\r\n\r\n    user = new UserModel({\r\n      username: \"testUser\",\r\n      email: \"test@example.com\",\r\n      password: \"password123\"\r\n    });\r\n    await user.save();\r\n\r\n    hall = new HallModel({\r\n      name: \"Main Hall\",\r\n      type: \"large\",\r\n      seats: [\r\n        {\r\n          row: \"A\",\r\n          number: 1,\r\n          reservationOps: { isReserved: false, reservation: null }\r\n        }\r\n      ]\r\n    });\r\n    await hall.save();\r\n\r\n    event = new EventModel({\r\n      name: \"Music Concert\",\r\n      description: \"A great concert\",\r\n      date: new Date(new Date().setDate(new Date().getDate() + 1)),\r\n      hall: hall._id,\r\n      tichetPrice: 50,\r\n      seats: []\r\n    });\r\n    await event.save();\r\n  });\r\n\r\n  describe(\"POST /api/reservations/create\", () => {\r\n    it(\"should create a reservation successfully\", async () => {\r\n      const { token, csrfToken, cookie, user } = await createUserAndLogin({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .post(\"/api/reservations/create\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({ eventId: event._id, seats: [{ row: \"A\", number: 1 }] })\r\n        .expect(201);\r\n\r\n      expect(response.body.message).toBe(\r\n        \"Draft of reservation created successfully\"\r\n      );\r\n      expect(response.body.reservation).toHaveProperty(\r\n        \"user\",\r\n        (user._id as any as string).toString()\r\n      );\r\n    });\r\n\r\n    it(\"should return 400 for unavailable seats\", async () => {\r\n      const { token, csrfToken, cookie, user } = await createUserAndLogin({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      event.seats = [\r\n        {\r\n          row: \"A\",\r\n          number: 1,\r\n          reservationOps: { isReserved: true, reservation: null }\r\n        }\r\n      ];\r\n      await event.save();\r\n\r\n      const reservation = new ReservationModel({\r\n        user: user._id,\r\n        event: event._id,\r\n        hall: hall._id,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        date: new Date(),\r\n        price: 50,\r\n        eventDate: new Date(),\r\n        isPaid: true\r\n      });\r\n      await reservation.save();\r\n\r\n      const response = await request(app)\r\n        .post(\"/api/reservations/create\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({ eventId: event._id, seats: [{ row: \"A\", number: 1 }] })\r\n        .expect(400);\r\n\r\n      expect(response.body.message).toBe(\"Some seats are already reserved\");\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/reservations\", () => {\r\n    it(\"should return a list of reservations\", async () => {\r\n      const { token, csrfToken, cookie, user } = await createUserAndLogin({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\",\r\n        role: \"admin\",\r\n        app\r\n      });\r\n\r\n      const reservation = new ReservationModel({\r\n        user: user._id,\r\n        event: event._id,\r\n        hall: hall._id,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        date: new Date(),\r\n        price: 50,\r\n        eventDate: new Date(),\r\n        isPaid: true\r\n      });\r\n      await reservation.save();\r\n\r\n      const response = await request(app)\r\n        .get(\"/api/reservations\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body.reservations).toHaveLength(1);\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/reservations/:id\", () => {\r\n    it(\"should return a reservation by ID\", async () => {\r\n      const reservation = new ReservationModel({\r\n        user: user._id,\r\n        event: event._id,\r\n        hall: hall._id,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        date: new Date(),\r\n        price: 50,\r\n        eventDate: new Date(),\r\n        isPaid: true\r\n      });\r\n      await reservation.save();\r\n\r\n      const { token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .get(`/api/reservations/${reservation._id}`)\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body._id).toBe(\r\n        (reservation._id as any as string).toString()\r\n      );\r\n    });\r\n  });\r\n\r\n  describe(\"DELETE /api/reservations/:id\", () => {\r\n    it(\"should delete a reservation successfully\", async () => {\r\n      const { token, csrfToken, cookie, user } = await createUserAndLogin({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const reservation = new ReservationModel({\r\n        user: user._id,\r\n        event: event._id,\r\n        hall: hall._id,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        date: new Date(),\r\n        price: 50,\r\n        eventDate: new Date(),\r\n        isPaid: true\r\n      });\r\n      await reservation.save();\r\n      const response = await request(app)\r\n        .delete(`/api/reservations/${reservation._id}`)\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body.message).toBe(\"Reservation deleted successfully\");\r\n    });\r\n  });\r\n\r\n  describe(\"PUT /api/reservations/cancel/:id\", () => {\r\n    it(\"should cancel a pending reservation\", async () => {\r\n      const { token, csrfToken, cookie, user } = await createUserAndLogin({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n      const reservation = new ReservationModel({\r\n        user: user._id,\r\n        event: event._id,\r\n        hall: hall._id,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        date: new Date(),\r\n        price: 50,\r\n        eventDate: new Date(),\r\n        isPaid: false\r\n      });\r\n      await reservation.save();\r\n\r\n      const response = await request(app)\r\n        .put(`/api/reservations/cancel/${reservation._id}`)\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body.message).toBe(\"Reservations canceled\");\r\n    });\r\n  });\r\n});\r\n"]}