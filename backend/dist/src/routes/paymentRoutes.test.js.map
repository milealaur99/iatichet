{"version":3,"file":"paymentRoutes.test.js","sourceRoot":"/","sources":["src/routes/paymentRoutes.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\r\nimport { app, server } from \"../../index\";\r\nimport { MongoMemoryServer } from \"mongodb-memory-server\";\r\nimport EventModel from \"../models/Event\";\r\nimport ReservationModel from \"../models/Reservation\";\r\nimport HallModel from \"../models/Hall\";\r\nimport UserModel from \"../models/User\";\r\nimport { createMongoServer, getCsrfTokenAndCookie } from \"../utils/jestMocks\";\r\nimport fs from \"fs\";\r\n\r\njest.setTimeout(100000);\r\njest.mock(\"../utils/redisUtils\", () => ({\r\n  getAsync: jest.fn(),\r\n  setAsync: jest.fn(),\r\n  timeoutStorage: new Map()\r\n}));\r\n\r\nlet mongoData: {\r\n  mongoServer: MongoMemoryServer;\r\n  disconnectServer: () => Promise<void>;\r\n};\r\n\r\nbeforeAll(async () => {\r\n  mongoData = await createMongoServer();\r\n});\r\n\r\nafterAll(async () => {\r\n  server.close();\r\n  await mongoData.disconnectServer();\r\n  jest.clearAllMocks();\r\n});\r\n\r\ndescribe(\"Payment Routes\", () => {\r\n  beforeEach(async () => {\r\n    await EventModel.deleteMany({});\r\n    await ReservationModel.deleteMany({});\r\n    await HallModel.deleteMany({});\r\n    await UserModel.deleteMany({});\r\n  });\r\n\r\n  describe(\"GET /api/payment/success\", () => {\r\n    it(\"should handle payment success and update reservation as paid\", async () => {\r\n      const user = new UserModel({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\"\r\n      });\r\n      await user.save();\r\n\r\n      const hall = new HallModel({\r\n        name: \"Main Hall\",\r\n        type: \"large\",\r\n        seats: [\r\n          {\r\n            row: \"A\",\r\n            number: 1,\r\n            reservationOps: { isReserved: false, reservation: null }\r\n          }\r\n        ]\r\n      });\r\n      await hall.save();\r\n\r\n      const event = new EventModel({\r\n        name: \"Music Concert\",\r\n        description: \"A great concert\",\r\n        date: new Date(),\r\n        hall: hall._id,\r\n        tichetPrice: 50,\r\n        seats: []\r\n      });\r\n      await event.save();\r\n\r\n      const reservation = new ReservationModel({\r\n        event: event._id,\r\n        user: user._id,\r\n        hall: hall._id,\r\n        date: new Date(),\r\n        price: 50,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        eventDate: new Date(),\r\n        isPaid: false\r\n      });\r\n      await reservation.save();\r\n\r\n      await request(app)\r\n        .get(`/api/payment/success?reservationId=${reservation._id}`)\r\n        .expect(302);\r\n\r\n      const updatedReservation = await ReservationModel.findById(\r\n        reservation._id\r\n      );\r\n      expect(updatedReservation?.isPaid).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/payment/cancel\", () => {\r\n    it(\"should handle payment cancellation\", async () => {\r\n      const user = new UserModel({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\"\r\n      });\r\n      await user.save();\r\n\r\n      const hall = new HallModel({\r\n        name: \"Main Hall\",\r\n        type: \"large\",\r\n        seats: [\r\n          {\r\n            row: \"A\",\r\n            number: 1,\r\n            reservationOps: { isReserved: false, reservation: null }\r\n          }\r\n        ]\r\n      });\r\n      await hall.save();\r\n\r\n      const event = new EventModel({\r\n        name: \"Music Concert\",\r\n        description: \"A great concert\",\r\n        date: new Date(),\r\n        hall: hall._id,\r\n        tichetPrice: 50,\r\n        seats: []\r\n      });\r\n      await event.save();\r\n\r\n      const reservation = new ReservationModel({\r\n        event: event._id,\r\n        user: user._id,\r\n        hall: hall._id,\r\n        date: new Date(),\r\n        price: 50,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        eventDate: new Date(),\r\n        isPaid: false\r\n      });\r\n      await reservation.save();\r\n\r\n      const response = await request(app)\r\n        .get(`/api/payment/cancel?reservationId=${reservation._id}`)\r\n        .expect(302);\r\n\r\n      const deletedReservation = await ReservationModel.findById(\r\n        reservation._id\r\n      );\r\n      expect(deletedReservation).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/payment/download-reservation\", () => {\r\n    it(\"should download the reservation PDF\", async () => {\r\n      const user = new UserModel({\r\n        username: \"testUser\",\r\n        email: \"test@example.com\",\r\n        password: \"password123\"\r\n      });\r\n      await user.save();\r\n\r\n      const hall = new HallModel({\r\n        name: \"Main Hall\",\r\n        type: \"large\",\r\n        seats: [\r\n          {\r\n            row: \"A\",\r\n            number: 1,\r\n            reservationOps: { isReserved: false, reservation: null }\r\n          }\r\n        ]\r\n      });\r\n      await hall.save();\r\n\r\n      const event = new EventModel({\r\n        name: \"Music Concert\",\r\n        description: \"A great concert\",\r\n        date: new Date(),\r\n        hall: hall._id,\r\n        tichetPrice: 50,\r\n        seats: []\r\n      });\r\n      await event.save();\r\n\r\n      const reservation = new ReservationModel({\r\n        event: event._id,\r\n        user: user._id,\r\n        hall: hall._id,\r\n        date: new Date(),\r\n        price: 50,\r\n        seats: [{ row: \"A\", number: 1 }],\r\n        eventDate: new Date(),\r\n        isPaid: true\r\n      });\r\n      await reservation.save();\r\n\r\n      fs.writeFileSync(\r\n        `pdfs/${reservation._id}.pdf`,\r\n        \"This is a test PDF\",\r\n        \"utf-8\"\r\n      );\r\n\r\n      const { csrfToken, cookie } = await getCsrfTokenAndCookie(app);\r\n\r\n      const response = await request(app)\r\n        .get(\r\n          `/api/payment/download-reservation?reservationId=${reservation._id}`\r\n        )\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.headers[\"content-disposition\"]).toContain(\r\n        \"attachment; filename=\"\r\n      );\r\n\r\n      fs.unlinkSync(`pdfs/${reservation._id}.pdf`);\r\n    });\r\n  });\r\n});\r\n"]}