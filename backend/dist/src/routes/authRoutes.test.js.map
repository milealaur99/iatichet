{"version":3,"file":"authRoutes.test.js","sourceRoot":"/","sources":["src/routes/authRoutes.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\r\nimport { app, server } from \"../../index\";\r\nimport { MongoMemoryServer } from \"mongodb-memory-server\";\r\nimport UserModel from \"../models/User\";\r\nimport {\r\n  createMongoServer,\r\n  createUserAndLogin,\r\n  getCsrfTokenAndCookie\r\n} from \"../utils/jestMocks\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\njest.setTimeout(100000);\r\n\r\njest.mock(\"../config/redis\", () => {\r\n  const actualRedis = jest.requireActual(\"redis-mock\");\r\n  const client = actualRedis.createClient();\r\n\r\n  client.connect = jest.fn();\r\n\r\n  return {\r\n    client\r\n  };\r\n});\r\njest.mock(\"../utils/redisUtils\", () => {\r\n  const timeoutStorage = new Map();\r\n  const usersViewingEvent = new Map();\r\n\r\n  return {\r\n    timeoutStorage,\r\n    usersViewingEvent,\r\n    getAsync: jest.fn((key) => Promise.resolve(null)),\r\n    setAsync: jest.fn((key, value) => Promise.resolve(\"OK\"))\r\n  };\r\n});\r\n\r\nlet mongoData: {\r\n  mongoServer: MongoMemoryServer;\r\n  disconnectServer: () => Promise<void>;\r\n};\r\n\r\nlet csrfToken: string;\r\nlet cookie: string;\r\n\r\nbeforeAll(async () => {\r\n  mongoData = await createMongoServer();\r\n});\r\n\r\nafterAll(async () => {\r\n  server.close();\r\n  await mongoData.disconnectServer();\r\n  jest.clearAllMocks();\r\n});\r\n\r\ndescribe(\"Auth Routes\", () => {\r\n  beforeEach(async () => {\r\n    await UserModel.deleteMany({});\r\n  });\r\n\r\n  describe(\"POST /api/auth/login\", () => {\r\n    it(\"should login successfully with correct credentials\", async () => {\r\n      const { user, token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"userInfoUser\",\r\n        email: \"userInfo@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .post(\"/api/auth/login\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({ username: \"userInfoUser\", password: \"password123\" })\r\n        .expect(200);\r\n\r\n      expect(response.body).toHaveProperty(\"token\");\r\n      expect(response.body).toHaveProperty(\r\n        \"userId\",\r\n        (user._id as unknown as string).toString()\r\n      );\r\n    });\r\n\r\n    it(\"should return 401 with incorrect credentials\", async () => {\r\n      const { token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"userInfoUser\",\r\n        email: \"userInfo@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .post(\"/api/auth/login\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({ username: \"wronguser\", password: \"wrongpassword\" })\r\n        .expect(401);\r\n\r\n      expect(response.body.message).toBe(\"Invalid credentials\");\r\n    });\r\n  });\r\n\r\n  describe(\"POST /api/auth/signup\", () => {\r\n    it(\"should signup successfully with valid data\", async () => {\r\n      const { cookie, csrfToken } = await getCsrfTokenAndCookie(app);\r\n      const response = await request(app)\r\n        .post(\"/api/auth/signup\")\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({\r\n          username: \"newuser\",\r\n          email: \"newuser@example.com\",\r\n          password: \"password123\",\r\n          confirmPassword: \"password123\"\r\n        })\r\n        .expect(200);\r\n\r\n      expect(response.body).toHaveProperty(\"token\");\r\n      const user = await UserModel.findOne({ username: \"newuser\" });\r\n      expect(user).not.toBeNull();\r\n    });\r\n\r\n    it(\"should return 409 if username or email already exists\", async () => {\r\n      const existingUser = new UserModel({\r\n        username: \"existinguser\",\r\n        email: \"existing@example.com\",\r\n        password: await bcrypt.hash(\"password123\", 12)\r\n      });\r\n      await existingUser.save();\r\n      const { cookie, csrfToken } = await getCsrfTokenAndCookie(app);\r\n\r\n      const response = await request(app)\r\n        .post(\"/api/auth/signup\")\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({\r\n          username: \"existinguser\",\r\n          email: \"newemail@example.com\",\r\n          password: \"password123\",\r\n          confirmPassword: \"password123\"\r\n        })\r\n        .expect(409);\r\n\r\n      expect(response.body.message).toBe(\"Username already exists\");\r\n\r\n      const emailConflictResponse = await request(app)\r\n        .post(\"/api/auth/signup\")\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({\r\n          username: \"newuser\",\r\n          email: \"existing@example.com\",\r\n          password: \"password123\",\r\n          confirmPassword: \"password123\"\r\n        })\r\n        .expect(409);\r\n\r\n      expect(emailConflictResponse.body.message).toBe(\"Email already exists\");\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/auth/user-info/:id?\", () => {\r\n    it(\"should return user info for authenticated user\", async () => {\r\n      const { user, token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"userInfoUser\",\r\n        email: \"userInfo@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .get(`/api/auth/user-info/${user._id}`)\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body.username).toBe(\"userInfoUser\");\r\n      expect(response.body.email).toBe(\"userInfo@example.com\");\r\n    });\r\n\r\n    it(\"should return 404 if user not found\", async () => {\r\n      const { token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"dummyUser\",\r\n        email: \"dummy@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .get(\"/api/auth/user-info/424242424242424242424242\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(404);\r\n\r\n      expect(response.body.message).toBe(\"User not found\");\r\n    });\r\n  });\r\n\r\n  describe(\"POST /api/auth/reset-password\", () => {\r\n    it(\"should reset password successfully\", async () => {\r\n      const { token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"resetUser\",\r\n        email: \"reset@example.com\",\r\n        password: \"oldpassword\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .post(\"/api/auth/reset-password\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({ password: \"newpassword\", confirmPassword: \"newpassword\" })\r\n        .expect(200);\r\n\r\n      expect(response.body.message).toBe(\"Password changed successfully\");\r\n    });\r\n\r\n    it(\"should return 401 if passwords do not match\", async () => {\r\n      const { token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"resetUser\",\r\n        email: \"reset@example.com\",\r\n        password: \"oldpassword\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .post(\"/api/auth/reset-password\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .send({ password: \"newpassword\", confirmPassword: \"wrongpassword\" })\r\n        .expect(401);\r\n\r\n      expect(response.body.message).toBe(\"Invalid credentials\");\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/auth/logout\", () => {\r\n    it(\"should logout successfully\", async () => {\r\n      const { token, csrfToken, cookie } = await createUserAndLogin({\r\n        username: \"logoutUser\",\r\n        email: \"logout@example.com\",\r\n        password: \"password123\",\r\n        role: \"user\",\r\n        app\r\n      });\r\n\r\n      const response = await request(app)\r\n        .get(\"/api/auth/logout\")\r\n        .set(\"Authorization\", `Bearer ${token}`)\r\n        .set(\"XSRF-TOKEN\", csrfToken)\r\n        .set(\"Cookie\", cookie)\r\n        .expect(200);\r\n\r\n      expect(response.body.message).toBe(\"Logged out successfully\");\r\n    });\r\n  });\r\n});\r\n"]}