{"version":3,"file":"resolver.js","sourceRoot":"/","sources":["src/graphql/resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4DAAoC;AACpC,wEAAgD;AAGhD,MAAM,SAAS,GAAe;IAC5B,KAAK,EAAE;QACL,MAAM,EAAE,GAAS,EAAE;YACjB,OAAO,MAAM,eAAK,CAAC,IAAI,EAAE,CAAC;QAC5B,CAAC,CAAA;QACD,KAAK,EAAE,SAAuC,EAAE,gDAAlC,CAAM,EAAE,EAAE,EAAE,EAAkB;YAC1C,OAAO,MAAM,eAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClC,CAAC,CAAA;QACD,YAAY,EAAE,GAAS,EAAE;YACvB,OAAO,MAAM,qBAAW,CAAC,IAAI,EAAE,CAAC;QAClC,CAAC,CAAA;QACD,WAAW,EAAE,SAAuC,EAAE,gDAAlC,CAAM,EAAE,EAAE,EAAE,EAAkB;YAChD,OAAO,MAAM,qBAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC,CAAA;KACF;CACF,CAAC;AAEF,kBAAe,SAAS,CAAC","sourcesContent":["import Event from \"../models/Event\";\r\nimport Reservation from \"../models/Reservation\";\r\nimport { IResolvers } from \"@graphql-tools/utils\";\r\n\r\nconst resolvers: IResolvers = {\r\n  Query: {\r\n    events: async () => {\r\n      return await Event.find();\r\n    },\r\n    event: async (_: any, { id }: { id: string }) => {\r\n      return await Event.findById(id);\r\n    },\r\n    reservations: async () => {\r\n      return await Reservation.find();\r\n    },\r\n    reservation: async (_: any, { id }: { id: string }) => {\r\n      return await Reservation.findById(id);\r\n    },\r\n  },\r\n};\r\n\r\nexport default resolvers;\r\n"]}